(*
 *  Nimble out-of-band authentication for EAP (EAP-NOOB)
 *                draft-aura-eap-noob-05
 *
 *   https://tools.ietf.org/html/draft-aura-eap-noob-05
 *)

(* ===== CHANNELS ===== *)
free c:channel. (* In-band channel *)

(* == Out-of-band Channels == *)
free OOBCP1:channel [private]. (* User-to-Peer 1 *)
free OOBCP2:channel [private]. (* User-to-Peer 2 *)
free OOBCS1:channel [private]. (* User-to-Server 1 *)
free OOBCS2:channel [private]. (* User-to-Server 2 *)

(* ===== DATA TYPES ===== *)
type Type_t.         (* Types 0 to 8 *)
type NAI_t.          (* Network Access Identifier *)
type State_t.        (* States 0 to 4 *)
type Info_t.         (* Server or Peer information *)
type Hoob_t.         (* Cryptographic hash hoob *)
type MAC_t.          (* Cryptographic MAC *)
type Ver_t.          (* Version *)
type Ver_l.          (* List of versions *)
type PeerId_t.       (* Peer ID *)
type PK_t.           (* Public key *)
type Cryptosuite_t.  (* Cryptosuite *)
type Cryptosuite_l.  (* List of cryptosuites *)
type Dir_t.          (* Direction *)
type N_t.            (* Nonce *)
type Noob_t.         (* Noob *)
type NoobId_t.       (* Noob ID *)
type UID_t.          (* User ID *)
type KDF_t.          (* Key derivation output *)
type KeyingMode_t.   (* Keying mode *)

(* == DH types == *)
type e.              (* Exponent *)
type G.              (* Generator *)
type K_t.            (* Key *)

(* ===== CONSTANTS ===== *)
(* == States == *)
const s0:State_t.
const s1:State_t.
const s2:State_t.
const s3:State_t.
const s4:State_t.

(* == Types == *)
const t1:Type_t.
const t2:Type_t.
const t3:Type_t.
const t4:Type_t.
const t5:Type_t.
const t6:Type_t.
const t7:Type_t.
const t8:Type_t.

(* == Message constants == *)
const OOB_ACCEPTED:Info_t.      (* OOB done *)
const REGISTRATION_DONE:Info_t. (* Registration done *)
const noob:PeerId_t.            (* Default peer identifier *)
const EAPSuccess:Type_t.        (* EAP Success *)
const EAPFailure:Type_t.        (* EAP Failure *)

(* == User IDs == *)
const UID1:UID_t.
const UID2:UID_t.

(* == ECDHE Generator == *)
const g:G [data].

(* == KDF output == *)
const kz:bitstring.
const kms:bitstring.
const kmp:bitstring.

(* ===== QUERIES & EVENTS ===== *)
(* == Completion events == *)
event PeerRegistrationComplete(channel,K_t).  (* Peer completes with key K *)
event PeerReconnectComplete(channel,K_t).     (* Peer completes with key K *)
event ServerRegistrationComplete(channel,K_t).(* Server completes with key K *)
event ServerReconnectComplete(channel,K_t).   (* Server completes with key K *)
event IntendToPair(UID_t,channel,channel).    (* User intends to pair devices *)

(* If a peer and a server finish the registration with a common key, a user must
 * have initiated the pairing process *)
query Peer:channel, Server:channel, Key:K_t, User:UID_t;
    (event (PeerRegistrationComplete(Peer, Key)) &&
     event (ServerRegistrationComplete(Server, Key))) ==>
        event (IntendToPair(User, Peer, Server))
.

(* A Reconnect Exchange can be completed *)
query Peer:channel, Server:channel, Key:K_t;
    (event (PeerReconnectComplete(Peer, Key)) &&
     event (ServerReconnectComplete(Server, Key)))
.

(* ===== FUNCTIONS ===== *)
fun hoob(bitstring):Hoob_t.     (* Hoob *)
fun noobid(Noob_t):NoobId_t.    (* Noob *)
fun hmac(K_t,bitstring):MAC_t.  (* HMAC *)

(* == ECDHE == *)
fun ecdhe(G, PK_t): G.
equation forall x:PK_t, y:PK_t;
    ecdhe(ecdhe(g,x),y) = ecdhe(ecdhe(g,y),x)
.

(* == Key Derivation == *)
fun Completion(G,N_t,N_t,Noob_t): KDF_t.
fun RekeyingECDHE(G,N_t,N_t): KDF_t.

(* == Extract Kms, Kmp or Kz from KDF == *)
fun extract(KDF_t, bitstring): K_t.

(* ===== PROCESSES ===== *)
let User(UID:UID_t, OOBCP:channel, OOBCS:channel) =
    (* Pair two devices *)
    event IntendToPair(UID, OOBCP, OOBCS);
    (* Relay OOB *)
    in(OOBCP, (PeerId:PeerId_t,Noob:Noob_t,Hoob:Hoob_t));
    out(OOBCS, (PeerId,Noob,Hoob));
    (* Server accepts the OOB *)
    in(OOBCS, =OOB_ACCEPTED);
    (* Registration done *)
    in(OOBCS, =REGISTRATION_DONE)
.

let Server(OOBCS:channel) =
    (* === Generate constant values === *)
    new Vers:Ver_l;                 (* Supported versions *)
    new Cryptosuites:Cryptosuite_l; (* Supported cryptosuites *)
    new Dirs:Dir_t;                 (* Supported OOB directions *)
    new ServerInfo:Info_t;          (* Server information *)
    new PKs:PK_t;                   (* Public ECDHE component *)
    new PKs2:PK_t;                  (* Public ECDHE component *)
    new Realm:bitstring;            (* Realm *)

    (* === Initial Exchange === *)
    (** EAP-Response/Identity **)
    in(c, (=s0,=noob));
    (** Request type 1 **)
    new PeerId:PeerId_t; (* Generate unique peer identifier *)
    out(c, (t1,Vers,PeerId,Realm,Cryptosuites,Dirs,ServerInfo));
    (** Response type 1 **)
    in(c, (=t1,Verp:Ver_t,=PeerId,Cryptosuitep:Cryptosuite_t,Dirp:Dir_t,
        PeerInfo:Info_t));
    (** Request type 2 **)
    new Ns:N_t;  (* Generate 32-byte nonce *)
    out(c, (t2,PeerId,PKs,Ns));
    (** Response type 2 **)
    in(c, (=t2,=PeerId,PKp:PK_t,Np:N_t));
    (** EAP-Failure **)
    out(c, EAPFailure);

    (* === Waiting Exchange === *)
    (** EAP-Response/Identity **)
    in(c, (=s1,=PeerId));
    (** Request type 3 **)
    out(c, (t3,PeerId));
    (** Response type 3 **)
    in(c, (=t3,=PeerId));
    (** EAP-Failure **)
    out(c, EAPFailure);

    (* === OOB Step === *)
    in(OOBCS, (=PeerId,Noob:Noob_t,Hoob:Hoob_t));
    if Hoob = hoob((Dirp,Vers,Verp,PeerId,Cryptosuites,Dirs,ServerInfo,
        Cryptosuitep,Dirp,PeerInfo,PKs,Ns,PKp,Np,Noob)) then
    let NoobId = noobid(Noob) in

    (* Inform user that OOB is received *)
    out(OOBCS, OOB_ACCEPTED);

    (* === Completion Exchange === *)
    (** EAP-Response/Identity **)
    in(c, (=s2,=PeerId));
    (** Request type 8 **)
    out(c, (t8,PeerId));
    (** Response type 8 **)
    in(c, (=t8,=PeerId,=NoobId));
    (** Request type 4 **)
    let Z = ecdhe(ecdhe(g,PKp),PKs) in
    let KDF = Completion(Z,Np,Ns,Noob) in
        let Kms = extract(KDF, kms) in
        let Kmp = extract(KDF, kmp) in
        let Kz = extract(KDF, kz) in
    let MACs = hmac(Kms, (Vers,Verp,PeerId,Cryptosuites,Dirs,ServerInfo,
        Cryptosuitep,Dirp,Realm,PeerInfo,PKs,Ns,PKp,Np,Noob)) in
    out(c, (t4,PeerId,NoobId,MACs));
    (** Response type 4 **)
    let MACp = hmac(Kmp, (Vers,Verp,PeerId,Cryptosuites,Dirs,ServerInfo,
        Cryptosuitep,Dirp,Realm,PeerInfo,PKs,Ns,PKp,Np,Noob)) in
    in(c, (=t4,=PeerId,=MACp));
    (** EAP-Success **)
    out(c, EAPSuccess);

    (* Inform user that the Completion Exchange is done *)
    out(OOBCS, REGISTRATION_DONE);
    (* Key-derivation successful *)
    event ServerRegistrationComplete(OOBCS, Kz);

    (* === Reconnect Exchange === *)
    (** EAP-Response/Identity **)
    in(c, (=s3,=PeerId));
    (** Request type 5 **)
    out(c, (t5,Vers,PeerId,Cryptosuites));
    (** Response type 5 **)
    in(c, (=t5,Verp:Ver_t,=PeerId,Cryptosuitep:Cryptosuite_t));
    (** Request type 6 **)
    new Ns2:N_t;  (* Generate 32-byte nonce *)
    new KeyingMode:KeyingMode_t; (* Select KeyingMode *)
    out(c, (t6,PeerId,KeyingMode,PKs2,Ns2));
    (** Response type 6 **)
    in(c, (=t6,=PeerId,PKp2:PK_t,Np2:N_t));
    (** Request type 7 **)
    let Z = ecdhe(ecdhe(g,PKp2),PKs2) in
    let KDF = RekeyingECDHE(Z,Np2,Ns2) in
        let Kms2 = extract(KDF, kms) in
        let Kmp2 = extract(KDF, kmp) in
        let Kz2 = extract(KDF, kz) in
    let MACs2 = hmac(Kms2, (Vers,Verp,PeerId,Cryptosuites,ServerInfo,
        Cryptosuitep,Realm,PeerInfo,KeyingMode,PKs2,Ns2,PKp2,Np2)) in
    out(c, (t7,PeerId,MACs2));
    (** Response type 7 **)
    let MACp2 = hmac(Kmp2, (Vers,Verp,PeerId,Cryptosuites,ServerInfo,
        Cryptosuitep,Realm,PeerInfo,KeyingMode,PKs2,Ns2,PKp2,Np2)) in
    in(c, (=t7,=PeerId,=MACp2));
    (** EAP-Success **)
    out(c, EAPSuccess);

    (* Reconnect successful *)
    event ServerReconnectComplete(OOBCS, Kz2);
    0
.

let Peer(OOBCP:channel) =
    (* === Generate constant values === *)
    new Verp:Ver_t;       (* Supported versions *)
    new PeerInfo:Info_t;  (* Peer information *)
    new PKp:PK_t;         (* Public ECDHE component *)
    new PKp2:PK_t;        (* Public ECDHE component *)

    (* === Initial Exchange === *)
    (** EAP-Response/Identity **)
    out(c, (s0,noob));
    (** Request type 1 **)
    in(c, (=t1,Vers:Ver_l,PeerId:PeerId_t,Realm:bitstring,
        Cryptosuites:Cryptosuite_l,Dirs:Dir_t,ServerInfo:Info_t));
    (** Response type 1 **)
    new Cryptosuitep:Cryptosuite_t; (* Selected cryptosuite *)
    new Dirp:Dir_t;                 (* Selected OOB direction *)
    out(c, (t1,Verp,PeerId,Cryptosuitep,Dirp,PeerInfo));
    (** Request type 2 **)
    in(c, (=t2,=PeerId,PKs:PK_t,Ns:N_t));
    (** Response type 2 **)
    new Np:N_t; (* Generate 32-byte nonce *)
    out(c, (t2,PeerId,PKp,Np));
    (** EAP-Failure **)
    in(c, =EAPFailure);

    (* === Waiting Exchange === *)
    out(c, ((s1,PeerId)));
    (* Request 3 *)
    in(c, (=t3,=PeerId));
    (* Response type 3 *)
    out(c, (t3,PeerId));
    (* EAP-Failure *)
    in(c, =EAPFailure);

    (* === OOB Step === *)
    new Noob:Noob_t; (* Generate 16-byte secret nonce *)
    let Hoob = hoob((Dirp,Vers,Verp,PeerId,Cryptosuites,Dirs,ServerInfo,
        Cryptosuitep,Dirp,PeerInfo,PKs,Ns,PKp,Np,Noob)) in
    out(OOBCP, (PeerId,Noob,Hoob));

    (* === Completion Exchange === *)
    (** EAP-Response/Identity **)
    out(c, (s2,PeerId));
    (** Request type 8 **)
    in(c, (=t8,=PeerId));
    (** Response type 8 **)
    let NoobId = noobid(Noob) in
        out(c, (t8,PeerId,NoobId));
    (** Request type 4 **)
    let Z = ecdhe(ecdhe(g,PKp),PKs) in
    let KDF = Completion(Z,Np,Ns,Noob) in
        let Kms = extract(KDF, kms) in
        let Kmp = extract(KDF, kmp) in
        let Kz = extract(KDF, kz) in
    let MACs = hmac(Kms, (Vers,Verp,PeerId,Cryptosuites,Dirs,ServerInfo,
        Cryptosuitep,Dirp,Realm,PeerInfo,PKs,Ns,PKp,Np,Noob)) in
    in(c, (=t4,=PeerId,=NoobId,=MACs));
    (** Response type 4 **)
    let MACp = hmac(Kmp, (Vers,Verp,PeerId,Cryptosuites,Dirs,ServerInfo,
        Cryptosuitep,Dirp,Realm,PeerInfo,PKs,Ns,PKp,Np,Noob)) in
    out(c, (t4,PeerId,MACp));
    (** EAP-Success **)
    in(c, =EAPSuccess);

    (* Key-derivation successful *)
    event PeerRegistrationComplete(OOBCP, Kz);

    (* === Reconnect Exchange === *)
    (** EAP-Response/Identity **)
    out(c, (s3,PeerId));
    (** Request type 5 **)
    in(c, (=t5,Vers:Ver_l,=PeerId,Cryptosuites:Cryptosuite_l));
    (** Response type 5 **)
    out(c, (t5,Verp,PeerId,Cryptosuitep));
    (** Request type 6 **)
    in(c, (=t6,=PeerId,KeyingMode:KeyingMode_t,PKs2:PK_t,Ns2:N_t));
    (** Response type 6 **)
    new Np2:N_t;  (* Generate 32-byte nonce *)
    out(c, (t6,PeerId,PKp2,Np2));
    (** Request type 7 **)
    let Z = ecdhe(ecdhe(g,PKp2),PKs2) in
    let KDF = RekeyingECDHE(Z,Np2,Ns2) in
        let Kms2 = extract(KDF, kms) in
        let Kmp2 = extract(KDF, kmp) in
        let Kz2 = extract(KDF, kz) in
    let MACs2 = hmac(Kms2, (Vers,Verp,PeerId,Cryptosuites,ServerInfo,
        Cryptosuitep,Realm,PeerInfo,KeyingMode,PKs2,Ns2,PKp2,Np2)) in
    in(c, (=t7,=PeerId,=MACs2));
    (** Response type 7 **)
    let MACp2 = hmac(Kmp2, (Vers,Verp,PeerId,Cryptosuites,ServerInfo,
        Cryptosuitep,Realm,PeerInfo,KeyingMode,PKs2,Ns2,PKp2,Np2)) in
    out(c, (t7,PeerId,MACp2));
    (** EAP-Success **)
    in(c, =EAPSuccess);

    (* Reconnect successful *)
    event PeerReconnectComplete(OOBCP, Kz2);
    0
.

process
    (
      Peer(OOBCP1) |
      Peer(OOBCP2) |
      Server(OOBCS1) |
      Server(OOBCS2) |
      User(UID1,OOBCP1,OOBCS1)
    )
